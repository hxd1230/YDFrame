<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#>
 
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile =@"..\\YDFrame.Models\\YDFrameDB.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System.Reflection;
using YDFrame.Common;
using YDFrame.IDAL;
namespace YDFrame.DALFactory
{
    public partial class AbstractFactory
    {
<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{    
#>		
	    public static I<#=entity.Name#>Repository Create<#=entity.Name#>Repository()
        {
            string classFulleName = ConfigUtil.GetAppSettings("NameSpace") + ".<#=entity.Name#>Repository";
			string assembly = ConfigUtil.GetAppSettings("DalAssembly");
            var obj  = CreateInstance( classFulleName,assembly);
            return obj as I<#=entity.Name#>Repository;
        }
<#}#>
	}
	
}